head(testing)
head(training)
set.seed(32343)
modelFit <- train(type ~., data = training, method = "glm")
install.packages("e1071")
modelFit <- train(type ~., data = training, method = "glm")
modelFit
modelFit$finalModel
predictions <- predict(modelFit, newdata = testing)
predictions
head(training)
names(training)
set.seed(32343)
modelFit <- train(type ~., data = training, method = "glm")
library(caret)
modelFit <- train(type ~., data = training, method = "glm")
modelFit
modelFit$finalModel
confusionMatrix(modelFit)
predictions
confusionMatrix(predictions, modelFit)
confusionMatrix(predictions, testing$type)
set.seed(32323)
folds <- createFolds(y = spam$type, k = 10, list = TRUE, returnTrain = TRUE)
sapply(folds, length)
folds[[1][1:10]]
folds[[[1]][1:10]]
folds[[1]][1:10]
folds <- createFolds(y = spam$type, k = 10, list = TRUE, returnTrain = FALSE)
sapply(folds, length)
View(folds)
class(folds)
folds[[1]]
folds[1]
args(train.default)
args(train)
args(trainControl)
args(train)
??train.default
args(train.default)
?trainControl
set.seed(12345)
modelFit2 <- train(type ~. , data = training, method = "glm")
modelFit2
modelFit
set.seed(1235)
modelFit3 <- train(type ~. , data = training, method = "glm")
library(ISLR)
install.packages("ISLR")
library(ISLR)
data("Wage")
summary(Wage)
inTrain <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
training <- Wage[inTrain,]
testing <- Wage
testing <- Wage[-inTrain, ]
dim(training)
dim(testing)
dim(Wage)
featurePlot(x = training[, c("age", "education", "jobclass")], y = training$wage, plot = "pairs")
qplo
qplot(age, wage, data = training)
qplot(age, wage, color = jobcalss, data = training)
qplot(age, wage, color = jobclass, data = training)
qq <- qplot(age, wage, colour = education, data = training)
qq + geom_smooth(method = 'lm', formula = y~x)
cutWage <- cut2(training$wage, g=3)
library
library(Hmisc)
cutWage <- cut2(training$wage, g=3)
table(cutWage)
t1 <- table(cutWage, training$jobclass)
t1
prop.table(t1, 1)
prop.table()
prop.table(t1)
qplot
qplot(wage, colour = education, data = training, geom = "density")
inTrain
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve, main = "", xlab = "ave. capital run lenght")
mean(training$capitalAve)
sd(training$capitalAve)
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
sd(trainCapAveS)
testCapAve <- testing$capitalAve
testCapAveS <- (testCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(testCapAveS)
sd(testCapAveS)
testing[,58]
set.seed(32343)
modelFit <- train(type ~ ., data = training, prePocess = c("center", "scale"), method = "glm")
modelFit
preObj <- preProcess(training[,-58], method = c("BoxCox"))
trainCapAveS <- predict(preObj, training[,-58])$capitalAve
par(mfrow=c(1,2))
hist(trainCapAveS)
qqnorm(trainCapAveS)
set.seed(13343)
training$capitalAve <- training$capitalAve
training$capAve <- training$capitalAve
library(kernlab)
data("spam")
spam$capitalAveSq <- spam$capitalAve^2
library(ISLR)
library(caret)
data("Wage")
inTrain <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
trable
trable(training$jobclass)
table(training$jobclass)
dummies <- dummyVars(wage ~ jobclass, data = training)
head(predict(dumies, newdata = training))
head(predict(dummies, newdata = training))
View(dummies)
nsv <- nearZeroVar(training, saveMetrics = TRUE)
NSV
nsv
library(splines)
bsBasis <- bs(training$age, df = 3)
bsBasis
head(bsBasis)
lm1 <- lm(wage ~ bsBasis, data = training)
plot(training$age, training$wage, pch = 19, cex = 0.5)
points(training$age, predict(lm1, newdata= training), col = "red", pch = 19, cex = 0.5)
predict(bsBasis, age = testing$age)
library(caret)
library(kernlab)
data("spam")
inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE)
training <- spam[inTrain, ]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <-0
which(M > 0.8, arr.ind = T)
names(spam)[c(34,32)]
plot(spam[,34], spam[,32])
library(caret)
data("faithful")
set.seed(333)
inTrain <- createDataPartition(y = faithful$waiting, p = 0.5, list = FALSE)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
plot(trainFaith$waiting, trainFaith$eruptions, pch = 19, col = "blue", xlab = "Waiting", ylab = "Duration")
par(mfrow = c(1,1))
plot(trainFaith$waiting, trainFaith$eruptions, pch = 19, col = "blue", xlab = "Waiting", ylab = "Duration")
lm1 <- lm(eruptions ~ waiting, data = trainFaith)
summary(lm1)
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting, lm1$fitted, lwd = 3)
coef(lm1)[1] + ceof(lm1)[2]*80
coef(lm1)[1] + coef(lm1)[2]*80
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("rJava")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc)
summary(mixtures)
head(mixtures)
plot(ComprenssiveStrength, data=mixtures)
plot(y = ComprenssiveStrength, data=mixtures)
plot(mixtures$CompressiveStrength)
cutCS <- cut2(mixtures$CompressiveStrength)
head(cutCS)
table(cutCS)
p2 <- qplot(cutCS, data = training, fill = cutCS, geom = c("boxplot", "jitter"))
library(ggplot2)
p2
p2 <- qplot(cutCS, data = training, fill = cutCS, geom = c("boxplot", "jitter"))
p2 <- qplot(mixtures$CompressiveStrength, data = training, fill = cutCS, geom = c("boxplot", "jitter"))
p2
featurePlot(x = mixtures, y =  mixtures$CompressiveStrength, plot = "pairs")
plot(mixtures$CompressiveStrength, col = mixtures$Cement)
plot(mixtures$CompressiveStrength, fill = mixtures$Cement)
?plot
qplot(mixtures$CompressiveStrength, col=mixtures$Cement)
qplot(mixtures$CompressiveStrength, colour=mixtures$Cement)
qplot(x = cutCS, y = mixtures$CompressiveStrength, colour = mixtures$FlyAsh)
qplot(y = mixtures$CompressiveStrength, colour = mixtures$FlyAsh)
qplot(y = mixtures$CompressiveStrength, colour = mixtures$Cement)
qplot(y = mixtures$CompressiveStrength, colour = mixtures$BlastFurnaceSlag)
qplot(y = mixtures$CompressiveStrength, colour = mixtures$Water)
qplot(y = mixtures$CompressiveStrength, colour = mixtures$Age)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training)
hist(training$Superplasticizer)
head(training$Superplasticizer)
head(training$Superplasticizer, n=15)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
names(training)
newdf <- df[grep("ÎL", training)]
newdf <- df[grep("ÎL", training),]
newdf <- df[grep("IL", training),]
IL_Colnames = grep("^IL", colnames(training), value=TRUE,ignore.case=TRUE)
pcaMod <- preProcess(training[,IL_Colnames], method="pca", thresh=0.9)
pcaMod
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433); data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
rm(list = ls())
data("concrete")
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p= 3/4)[[1]]
head(inTrain)
training = mixtures[inTrain]
training = mixtures[inTrain ,]
testing = mixtures[-inTrain, ]
plot(training)
?qplot
names(training)
qplot(training$CompressiveStrength, colour = cut2(mixtures$BlastFurnaceSlag))
qplot(y = training$CompressiveStrength, colour = cut2(mixtures$BlastFurnaceSlag))
cutColor <- cut2(mixtures$BlastFurnaceSlag)
qplot(mixtures$CompressiveStrength, colour = cutColor)
qplot(y = mixtures$CompressiveStrength, colour = cutColor)
qplot(y = mixtures$CompressiveStrength, colour = cu2(mixtures$Cement))
cutColor <- cut2(mixtures$Cement)
qplot(y = mixtures$CompressiveStrength, colour = cutColor)
qplot(y = mixtures$CompressiveStrength, colour = cut2(mixtures$Cement))
qplot(y = mixtures$CompressiveStrength, colour = cut2(mixtures$BlastFurnaceSlag))
qplot(y = mixtures$CompressiveStrength, colour = cut2(mixtures$FlyAsh))
qplot(y = mixtures$CompressiveStrength, colour = cut2(mixtures$Water))
qplot(y = mixtures$CompressiveStrength, colour = cut2(mixtures$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
names(training)
?preProcess
preProc <- preProcess(training, method = "pca", pcaComp = 2)
preProc
preProc <- preProcess(training, method = "pca")
preProc
?preProcess
?grep
IL_colnames <- grep("^IL", colnames(training), value = TRUE, ignore.case = TRUE)
IL_colnames
pcaMod <- preProcess(training[, IL_colnames], method = "pca", thresh = 0.9)
pcaMod
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[
inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
adData
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
data("iris")
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y = iris$Species, p)
inTrain <- createDataPartition(y = iris$Species, p = 0.7, list = FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training);dim(testing)
qplot
qplot(Petal.Width, Sepal.Width, colour = Species, data=training)
modFit <- mode(Species ~ ., method = "rpart", data=training)
modFit <- train(Species ~ ., method = "rpart", data=training)
modFit
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = 8)
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = ,8)
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata = testing)
rm(list = ls()
)
library(ElemStatLearn)
install.packages(c("rJava", "rlang"))
install.packages("ElemStatLearn")
data(ozone, package = "ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA, nrow = 10, ncol = 155)
ll
for(i in 1:10){ss <- sample(1:dim(ozone)[1], replace = T) ozone0 <- ozone[ss,]; ozone0}
?loess
library(ISLR)
data("Wage")
library(ggplot2)
library(caret)
install.packages(latice)
library(latice)
library(lattice)
library(caret)
Wage <- subset(Wage, select = c(-logwage))
logwage
?subset
head(Wage)
inTrain <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
training <- Wage[inTrain]
testing <- Wage[-inTrain,]
training <- Wage[inTrain, ]
modFit <- train(wage ~ ., method = "gmb", data = training, verbose = FALSE)
modFit <- train(wage ~ ., method = "GBM", data = training, verbose = FALSE)
modFit <- train(wage ~ ., method = "gbm", data = training, verbose = FALSE)
print(modFit)
qplot(predict(modFit, testing), wage, data = testing)
rm(list = ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret
)
head(segmentationOriginal)
segmentationOriginal$Case
knitr::opts_chunk$set(echo = TRUE)
# library
library(caret)
# donwloada data
urlTrain <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
urtTest <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
csvTrain <- "pml-training.csv"
csvTest <-  "pml-testing.csv"
if (file.exists(csvTrain)) {
training <- read.csv(csvTrain, na.strings=c("NA","#DIV/0!",""))
} else {
download.file(urlTrain,csvTrain)
training <- read.csv(csvTrain, na.strings=c("NA","#DIV/0!",""))
}
if (file.exists(csvTest)) {
testing <- read.csv(csvTest, na.strings=c("NA","#DIV/0!",""))
} else {
download.file(urlTest,csvTest)
testing <- read.csv(csvTest, na.strings=c("NA","#DIV/0!",""))
}
dim(training)
dim(testing)
sum(is.na(training))
inTrain <- createDataPartition(training$classe, p=0.6, list = FALSE)
newTraining <- training[inTrain,]
newTesting <- training[-inTrain,]
dim(newTraining)
dim(newTesting)
?rpart
library(ggplot2)
# library
library(caret)
library(ggplot2)
library(rattle)
library(rpart)
# donwloada data
urlTrain <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
urtTest <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
csvTrain <- "pml-training.csv"
csvTest <-  "pml-testing.csv"
if (file.exists(csvTrain)) {
training <- read.csv(csvTrain, na.strings=c("NA","#DIV/0!",""))
} else {
download.file(urlTrain,csvTrain)
training <- read.csv(csvTrain, na.strings=c("NA","#DIV/0!",""))
}
if (file.exists(csvTest)) {
testing <- read.csv(csvTest, na.strings=c("NA","#DIV/0!",""))
} else {
download.file(urlTest,csvTest)
testing <- read.csv(csvTest, na.strings=c("NA","#DIV/0!",""))
}
dim(training)
dim(testing)
sum(is.na(training))
head(testing)
names(testing)
training$classe
testing$classe
controls <- trainControl(method="cv", number = 5)
modFitRF <- train(classe ~ ., data = newTraining, method = "rf", controls, allowParallel = TRUE)
?trainControl
install.packages("shiny")
library(shiny)
runApp('~/Test')
shiny::runApp('DevelopingDataProducts/ShinyApp01/myApp')
runApp('DevelopingDataProducts/ShinyApp01/myApp')
runApp('DevelopingDataProducts/ShinyApp01/myApp')
runApp('DevelopingDataProducts/ShinyApp01/myApp')
source('E:/Luciano/R_WorkingDir/DevelopingDataProducts/ShinyApp01/ShinyGadgets/app.R')
rm(list = ls())
head(mtcars)
knitr::opts_chunk$set(echo = FALSE)
head(mtcars)
install.packages("leaflet")
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
lng = runif(20, min = -76.65, max = -76.55))
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers()
library(leaflet)
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers()
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
library(leaflet)
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5898801,
popup="Jeff Leek's Office")
my_map
leaflet() %>%
addTiles() %>%
addRectangles(lat1 = 37.3858, lng1 = -122.0595,
lat2 = 37.3890, lng2 = -122.0625)
df %>% leaflet() %>% addTiles()
leaflet(addTiles(df))
addTiles(leaflet(df))
addTiles(leaflet(df))
addTiles(leaflet(df()))
leaflet(df) %>% addTiles()
df(leaflet(addTiles()))
export("mvtsplot")
import(splines)
import(RColorBrewer)
importFrom("grDevices", "colorRampPalette", "gray")
importFrom("graphics", "abline", "axis", "box", "image",
"layout", "lines", "par", "plot", "points",
"segments", "strwidth", "text", "Axis")
importFrom("stats", "complete.cases", "lm", "na.exclude",
"predict", "quantile")
rm(list = ls8)
rm(list = ls())
install.packages("plotly")
plot_ly(data = mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~cyl)
library(plotly)
setwd("E:/Luciano/R_WorkingDir/DevelopingDataProducts/Project01")
install.packages("shiny")
library(shiny)
runApp('CourseProject')
runApp()
ls()
dir()
cd "./CourseProject/"
?cd
setwd("E:/Luciano/R_WorkingDir/DevelopingDataProducts/Project01/CourseProject")
runApp()
?builder
runApp()
runApp()
runApp()
?checkboxInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
